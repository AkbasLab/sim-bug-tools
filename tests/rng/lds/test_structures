import structs
import sim_bug_tools.rng.lds.sequences as sequences
import unittest, random
from unittest import TestCase


# def generatePoints(n, dims, seed=1, bounds=(0, 10)):
#     random.seed(seed)
#     points = []
#     for i in range(n):
#         points += [[random.randint(bounds[0], bounds[1]) for i in range(dims)]]

#     points = list(map(lambda p: structs.Point(p), points))

#     return points


# def generateRes(s, dims):
#     return [s for d in range(dims)]


# def generateDomain(l, h, dims):
#     return structs.Domain([(l, h) for d in range(dims)])


## Global Test Variables

# dims = 4
# points = generatePoints(100, dims)
# axes_names = "x,y,z,h".split(",")
# res = generateRes(0.1, dims)
# domain = generateDomain(0, 1, dims)
# hm: structs.Heatmap = structs.Heatmap(points, axes_names, res, domain)


class TestHeatmap(unittest.TestCase):
    @classmethod
    def setUpClass(cls) -> None:
        cls.dims = 4
        cls.sequence = sequences.SobolSequence(cls.dims)

        return super().setUpClass()

    @classmethod
    def tearDownClass(cls) -> None:
        return super().tearDownClass()

    def setUp(self):

        self.non_active = list(hm.constantAxes.keys())
        self.x, self.y = hm.active_axes
        self.other1, self.other2 = self.non_active[0], self.non_active[1]

    def tearDown(self):
        pass

    def test_swapAxes_frameOnly(self):

        # Part 1
        # Switch active axes
        x, y = hm.active_axes
        hm.swapAxes(x, y)

        self.assertEquals(
            [y, x],
            hm.active_axes,
            f"Failed to swap frame's axes. {[y, x]} != {hm.active_axes}",
        )

    def test_swapAxes_both(self):

        # Part 2A
        non_active = list(hm.constantAxes.keys())
        self.assertEquals(
            len(non_active),
            dims - 2,
            "#Active + #non-active axes does not add up to total axes.",
        )

        for axis_name in non_active:
            self.assertNotIn(
                axis_name,
                hm.active_axes,
                "Non-active and active axes are not mutually exclusive.",
            )

        # Switch x with non-active axis
        x, y = hm.active_axes
        x_index = hm.axes_index[x]
        other = non_active[0]
        # other_index = hm.axes_index[other]

        hm.swapAxes(x, other)

        self.assertEquals(
            [other, y],
            hm.active_axes,
            "Failed to swap active with non-active axis.",
        )

        self.assertEquals(
            x_index, hm.axes_index[other], "Axis indices failed to switch properly."
        )

        # Part 2B
        non_active = list(hm.constantAxes.keys())
        self.assertEquals(
            len(non_active),
            dims - 2,
            "Active + non-active axes does not add up to total axes.",
        )

        for axis_name in non_active:
            self.assertNotIn(
                axis_name,
                hm.active_axes,
                "Non-active and active axes are not mutually exclusive.",
            )

        # Switch y with non-active axis
        x, y = hm.active_axes
        y_index = hm.axes_index[y]
        other = non_active[1]

        hm.swapAxes(y, other)

        self.assertEquals(
            [x, other],
            hm.active_axes,
            "Failed to swap active with non-active axis.",
        )

        self.assertEquals(
            y_index, hm.axes_index[other], "Axis indices failed to switch properly."
        )

    def test_swapAxes_nonFrameOnly(self):
        # Part 3
        non_active = list(hm.constantAxes.keys())
        self.assertEquals(
            len(non_active),
            dims - 2,
            "Active + non-active axes does not add up to total axes.",
        )

        for axis_name in non_active:
            self.assertNotIn(
                axis_name,
                hm.active_axes,
                "Non-active and active axes are not mutually exclusive.",
            )

        # Switch y with non-active axis
        x, y = hm.active_axes
        other1, other2 = non_active[0], non_active[1]
        other1_index, other2_index = hm.axes_index[other1], hm.axes_index[other2]

        hm.swapAxes(other1, other2)

        self.assertEqual(
            [x, y],
            hm.active_axes,
            "Swap between two non-active axes led to a change within active axes.",
        )

        self.assertEqual(
            other2_index,
            hm.axes_index[other1],
            "Axis indices failed to switch properly for other1.",
        )

        self.assertEqual(
            other1_index,
            hm.axes_index[other2],
            "Axis indices failed to switch properly for other2.",
        )


if __name__ == "__main__":
    unittest.main()
